import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="ko">
      <head>
        {/* 브라우저 확장 프로그램 충돌 방지 */}
        <meta name="csp" content="script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; object-src 'none';" />
      </head>
      <body className={geistSans.className}>
        {children}
        {/* 글로벌 에러 핸들러 및 확장 프로그램 충돌 방지 */}
        <script 
          dangerouslySetInnerHTML={{
            __html: `
              // 글로벌 에러 핸들러
              window.addEventListener('error', function(event) {
                console.error('🚨 전역 에러 발생:', {
                  message: event.message,
                  filename: event.filename,
                  lineno: event.lineno,
                  colno: event.colno,
                  error: event.error
                });
                
                // 확장 프로그램 관련 에러는 무시
                if (event.filename && (
                  event.filename.includes('extension://') ||
                  event.filename.includes('chrome-extension://') ||
                  event.filename.includes('moz-extension://') ||
                  event.filename.includes('content.js') ||
                  event.filename.includes('script.js') ||
                  event.filename.includes('rl-cs.js')
                )) {
                  console.log('⚠️ 브라우저 확장 프로그램 에러 무시됨');
                  event.preventDefault();
                  return;
                }
                
                // 모바일에서 에러 표시
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  const errorDiv = document.createElement('div');
                  errorDiv.style.cssText = 'position:fixed;bottom:10px;left:10px;right:10px;background:red;color:white;padding:10px;border-radius:5px;z-index:9999;font-size:12px;';
                  errorDiv.innerHTML = '⚠️ 에러: ' + event.message + '<br>위치: ' + (event.filename || 'unknown');
                  errorDiv.onclick = function() { this.remove(); };
                  document.body.appendChild(errorDiv);
                  setTimeout(() => errorDiv.remove(), 10000);
                }
              });
              
              // Promise rejection 핸들러
              window.addEventListener('unhandledrejection', function(event) {
                console.error('🚨 처리되지 않은 Promise 거부:', event.reason);
                
                // 확장 프로그램 관련 거부는 무시
                if (event.reason && event.reason.stack && (
                  event.reason.stack.includes('extension://') ||
                  event.reason.stack.includes('chrome-extension://')
                )) {
                  console.log('⚠️ 브라우저 확장 프로그램 Promise 거부 무시됨');
                  event.preventDefault();
                  return;
                }
              });
              
              // Array.prototype.map 보호
              if (Array.prototype.map && !Array.prototype._originalMap) {
                Array.prototype._originalMap = Array.prototype.map;
                Array.prototype.map = function(...args) {
                  if (!this || typeof this !== 'object') {
                    console.error('🚨 map 호출 오류: 대상이 배열이 아님', this);
                    return [];
                  }
                  try {
                    return Array.prototype._originalMap.apply(this, args);
                  } catch (e) {
                    console.error('🚨 map 실행 오류:', e);
                    return [];
                  }
                };
              }
              
              console.log('✅ 에러 핸들러 및 보호 코드 설치 완료');
            `
          }}
        />
        {/* 개발 환경에서만 모바일 콘솔 활성화 */}
        {process.env.NODE_ENV === 'development' && (
          <script 
            dangerouslySetInnerHTML={{
              __html: `
                // 모바일에서만 Eruda 콘솔 로드
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  const script = document.createElement('script');
                  script.src = 'https://cdn.jsdelivr.net/npm/eruda@3.0.1/eruda.min.js';
                  script.onload = function() {
                    eruda.init();
                    console.log('📱 모바일 디버그 콘솔이 활성화되었습니다. 우하단 버튼을 터치하세요.');
                  };
                  document.head.appendChild(script);
                }
              `
            }}
          />
        )}
      </body>
    </html>
  )
}
